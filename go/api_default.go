/*
 * Loan Calculator
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"net/http"
	//"log"
	//"fmt"
	"io/ioutil"
	"encoding/json"
	"math"
	//"strconv"

)

func CalculateLoan(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	requestBodyBytes, _ := ioutil.ReadAll(r.Body)
	var  CalculateLoan CalculateloanBody
	json.Unmarshal(requestBodyBytes, &CalculateLoan) //nolint
	P := float64(CalculateLoan.LoanAmount)
	i := float64(CalculateLoan.InterestRate)
	n := float64(CalculateLoan.LoanTerm)

	var loanRepay LoanRepayments
	
	
	if CalculateLoan.LoanType == "Interest Only" {

		
		tempMonthlyRepayment := float64(P * i / 12)
		tempTotalInterest := float64(tempMonthlyRepayment * n * 12)
		loanRepay.TotalInterestPayable = int32(tempTotalInterest)
		loanRepay.MonthlyRepayments = int32(tempMonthlyRepayment)

		for j := int32(0); j<int32(n+1); j++{
			
			var LoanRepaymentsAmountO LoanRepaymentsAmountOwing
			LoanRepaymentsAmountO.Year = j
			LoanRepaymentsAmountO.Principal = int32(P)
			LoanRepaymentsAmountO.Interest = int32(tempTotalInterest - (tempMonthlyRepayment * 12 * float64(j)))
			LoanRepaymentsAmountO.Total = int32(P + (tempTotalInterest - (tempMonthlyRepayment * 12 * float64(j))))
			loanRepay.AmountOwing = append(loanRepay.AmountOwing, LoanRepaymentsAmountO)
		}
		
		w.WriteHeader(http.StatusOK)
	}	else if (CalculateLoan.LoanType == "Principal & Interest"){ //Principal and Interest


		tempMonthlyRepayment := float64(P * i * math.Pow(1+i,n*12) /(math.Pow(1+i,n*12)-1))
		tempTotalInterest := float64(tempMonthlyRepayment*n*12- P)

		loanRepay.TotalInterestPayable = int32(tempTotalInterest)
		loanRepay.MonthlyRepayments = int32(tempMonthlyRepayment)

		
		for j := int32(0); j<int32(n+1); j++{
			
			var LoanRepaymentsAmountO LoanRepaymentsAmountOwing
			LoanRepaymentsAmountO.Year = j

			for k := 0; k < 12; k++{
				tempTotalInterest = tempTotalInterest - (P * i / 12)
				P = P - (tempMonthlyRepayment - (P * i / 12))
			}
			LoanRepaymentsAmountO.Principal = int32(P)
			LoanRepaymentsAmountO.Interest = int32(tempTotalInterest)
			LoanRepaymentsAmountO.Total = int32(P + tempTotalInterest)
			loanRepay.AmountOwing = append(loanRepay.AmountOwing, LoanRepaymentsAmountO)
		}



		/* 
			every month: monthly repayment - interest (P * 1/12), is the money that will be taken away from Principal
			so for every year a for loop of 12 will need to represent monthly payment, the final results at the end of the
			for loop will be the yearly total.
		
		*/	
	}
	
	
	jresponse,_:=json.Marshal(&loanRepay) //convert CalculateloanBody type to string for sending back

	w.Write(jresponse) //nolint
	//Test1 := strconv.Itoa(Test)
	//log.Printf("%f\n", Answer)
	//log.Printf(CalculateLoan.LoanType)
	
	
}

